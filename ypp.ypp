%{
#include "hpp.hpp"
%}
%defines %union { Sym*o; }
%token <o> SYM NUM
%token <o> LP RP LQ RQ		/* () [] */
%token <o> EQ TILD COMMA	/* = ~ , */
%type <o> ex scalar list
%%
REPL : | REPL ex		{ cout << $2->dump();
						  cout << "\n-----------------------------------"; 
						  cout << $2->eval()->dump();
						  cout << "\n===================================\n"; };
scalar : SYM | NUM ;
ex : scalar
	| LP ex RP			{ $$=$2; }
	| LQ list RQ		{ $$=$2; }
	| SYM LP list RP	{ $$=new Term($1,$3); }
	| TILD ex			{ $$=$1; $$->push($2); }
	| ex EQ ex			{ $$=$2; $$->push($1); $$->push($3); }
;
list :					{ $$=new List(); }
	| list ex			{ $$=$1; $$->push($2); }
	| list COMMA ex		{ $$=$1; $$->push($3); }
;
%%